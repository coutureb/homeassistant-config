###############################################################################
#   @author         :   Jeffrey Stone 
#   @date           :   04/11/2020
#   @package        :   Audio
#   @description    :   Audio related configuration. 
#   @notes          :   This package assumes you are running version .115.0 or greater. 
#
###############################################################################


################################
# Media Player section for any media players you want to define. Most of these are setup via the integrations flow in the UI, 
# but if not you may need to modify the following section. 
# For more info on Media Players visit https://www.home-assistant.io/integrations/media_player/
# MODIFY this section as needed or comment it out completely if not needed.
# media_player:
  # - platform: yamaha
  #   host: 192.168.7.152

################################
# Media extractor is used for playing youtube audio. For more info ->https://www.home-assistant.io/integrations/media_extractor/
#
# If you have this enabled in another package or in your configuration.yaml comment out the line below
media_extractor:


############################
# input_datetime (https://www.home-assistant.io/integrations/input_datetime/)
# 
# This is simply so we can track last called alexa.     
input_datetime:
  last_time_alexa_called:
    name: Last Time Alexa Called
    has_date: true
    has_time: true


################################
# Scripts to handle audio
script:

  ################################
  # local_audio is meant to be used to play audio in your media folder. (https://www.home-assistant.io/integrations/media_source/)
  # 
  # Before using make sure you update as needed.
  # 
  # To call this using in the action section of your automation:
  # 
  # - service: script.local_audio
  #   data:
  #     speaker: main
  #     volume: .3
  #     media: /media/local_audio.mp3
  #
  local_audio:
    sequence:
    # Ensure that audible notifications are allowed. Comment out if not needed.
    - condition: state
      entity_id: input_boolean.audible_notifications
      state: 'on'
    # Ensure the family is home. If you are using a group to track the family, or a person just update as needed. Comment out if not needed.
    - condition: state
      entity_id: group.family
      state: 'home'
    # This sets the voume via a parameter when the script is called, and should be a value between .1 and 1.0
    - service: media_player.volume_set
      data:
        entity_id: >
         {% set who = speaker %}
          {% if who == 'kitchen' %}
            media_player.kitchen_display
          {% elif who == 'theater' %}
            media_player.theater_speaker
          {% elif who == 'croft' %}
            media_player.croft_speaker
          {% elif who in ['skylar_bedroom', 'skylars_bedroom'] %}
            media_player.skylars_bedroom_speaker
          {% elif who == 'master_bedroom' %}
            media_player.master_bedroom_speaker
          {% elif who in ['studio', 'studio_speaker', 'media_player.studio_speaker'] %}
            media_player.studio_speaker
          {% elif who == 'main' %}
            media_player.ha_blue
          {% else %}
            {% if states.input_boolean.audible_notifications.state == 'on' %}
            media_player.ha_blue
            {% else %}
            media_player.kitchen_display
            {% endif %}
          {% endif %}
        volume_level: >
          {{ volume }}
    - delay: 00:00:05
    # This tells it to play the media and is set when the script is called. 
    - service: media_player.play_media
      data:
        entity_id: >
          {% set who = speaker %}
          {% if who == 'kitchen' %}
            media_player.kitchen_display
          {% elif who == 'theater' %}
            media_player.theater_speaker
          {% elif who == 'croft' %}
            media_player.croft_speaker
          {% elif who in ['skylar_bedroom', 'skylars_bedroom'] %}
            media_player.skylars_bedroom_speaker
          {% elif who == 'master_bedroom' %}
            media_player.master_bedroom_speaker
          {% elif who in ['studio', 'studio_speaker', 'media_player.studio_speaker'] %}
            media_player.studio_speaker
          {% elif who == 'main' %}
            media_player.ha_blue
          {% else %}
            {% if states.input_boolean.audible_notifications.state == 'on' %}
            media_player.ha_blue
            {% else %}
            media_player.kitchen_display
            {% endif %}
          {% endif %}
        media_content_type: "music"
        media_content_id: >
          {{ media }}
  
  
  ################################
  # youtube_audio is meant to be used to play audio from well youtube. 
  # This scrtip requires the media_extractor integration.
  # 
  # Before using make sure you update as needed.
  # 
  # To call this using in the action section of your automation:
  # 
  # - service: script.youtube_audio
  #   data:
  #     speaker: main
  #     volume: .5
  #     media: https://www.youtube.com/watch?v=pVeX4C9B1Lk
  #
  youtube_audio:
    sequence:
    # Ensure that audible notifications are allowed. Comment out if not needed.
    - condition: state
      entity_id: input_boolean.audible_notifications
      state: 'on'
    # Ensure the family is home. If you are using a group to track the family, or a person just update as needed. Comment out if not needed.
    - condition: state
      entity_id: group.family
      state: 'home'
    # This sets the voume via a parameter when the script is called, and should be a value between .1 and 1.0
    - service: media_player.volume_set
      data:
        entity_id: >
          {% set who = speaker %}
          {% if who == 'kitchen' %}
            media_player.kitchen_display
          {% elif who == 'theater' %}
            media_player.theater_speaker
          {% elif who == 'croft' %}
            media_player.croft_speaker
          {% elif who in ['skylar_bedroom', 'skylars_bedroom'] %}
            media_player.skylars_bedroom_speaker
          {% elif who == 'master_bedroom' %}
            media_player.master_bedroom_speaker
          {% elif who in ['studio', 'studio_speaker', 'media_player.studio_speaker'] %}
            media_player.studio_speaker
          {% elif who == 'main' %}
            media_player.ha_blue
          {% else %}
            {% if states.input_boolean.audible_notifications.state == 'on' %}
            media_player.ha_blue
            {% else %}
            media_player.kitchen_display
            {% endif %}
          {% endif %}
        volume_level: >
          {{ volume }}
    # This tells it to play the media and is set when the script is called.
    #  media_content_type: video/Youtube
    - service: media_extractor.play_media
      data:
        entity_id: >
          {% set who = speaker %}
          {% if who == 'kitchen' %}
            media_player.kitchen_display
          {% elif who == 'theater' %}
            media_player.theater_speaker
          {% elif who == 'croft' %}
            media_player.croft_speaker
          {% elif who in ['skylar_bedroom', 'skylars_bedroom'] %}
            media_player.skylars_bedroom_speaker
          {% elif who == 'master_bedroom' %}
            media_player.master_bedroom_speaker
          {% elif who in ['studio', 'studio_speaker', 'media_player.studio_speaker'] %}
            media_player.studio_speaker
          {% elif who == 'main' %}
            media_player.ha_blue
          {% else %}
            {% if states.input_boolean.audible_notifications.state == 'on' %}
            media_player.ha_blue
            {% else %}
            media_player.kitchen_display
            {% endif %}
          {% endif %}
        media_content_type: music
        media_content_id: >
          {{ media }}

  bedtime_music_echo:
    sequence:
      - service: media_player.play_media
        target:
          entity_id: media_player.skylars_room
        data:
          media_content_id: bedtime music on
          media_content_type: routine
  
  adjust_audio:
    sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: input_boolean.disney_background
            state: 'on'
          - condition: state
            entity_id: media_player.apple_tv
            state: 'playing'
          sequence:
          - service: input_boolean.turn_off
            entity_id: input_boolean.disney_background
        - conditions:
          - condition: state
            entity_id: input_boolean.disney_background
            state: 'off'
          - condition: state
            entity_id: media_player.apple_tv
            state: 'standy'
          - condition: time
            after: "07:00:00"
            before: "19:00:00"
            weekday:
              - sat
              - sun
          sequence:
          - service: input_boolean.turn_on
            entity_id: input_boolean.disney_background
        default: []
 
mqtt:
  sensor:
  - name: "Room Presence"
    state_topic: "house/presence/current_room"
  - name: "Presence Source"
    state_topic: "house/presence/source"
    
sensor:
  - platform: template
    sensors:
      google_speaker:
        friendly_name: "Google Speaker"
        value_template: >-
          {% set who = states('sensor.room_audio')%}
          {% if who == 'kitchen' %}
            Kitchen Display
          {% elif who == 'theater' %}
            Theater Speaker
          {% elif who == 'croft' %}
            Croft speaker
          {% elif who in ['skylar_bedroom', 'skylars_bedroom'] %}
            skylars bedroom speaker
          {% elif who == 'master_bedroom' %}
            Master Bedroom Speaker
          {% elif who in ['studio', 'studio_speaker', 'media_player.studio_speaker'] %}
            media_player.studio_speaker
          {% elif who == 'main' %}
            media_player.ha_blue
          {% else %}
            {% if states.input_boolean.audible_notifications.state == 'on' %}
            media_player.ha_blue
            {% else %}
            media_player.kitchen_display
            {% endif %}
          {% endif %}
      spotify_speaker:
        friendly_name: "Spotify Speaker"
        value_template: >-
          {% set who = states('sensor.room_audio')%}
          {% if who == 'kitchen' %}
            media_player.kitchen_display
          {% elif who == 'theater' %}
            media_player.theater_speaker
          {% elif who == 'croft' %}
            media_player.croft_speaker
          {% elif who in ['skylar_bedroom', 'skylars_bedroom'] %}
            media_player.skylars_bedroom_speaker
          {% elif who == 'master_bedroom' %}
            media_player.master_bedroom_speaker
          {% elif who in ['studio', 'studio_speaker', 'media_player.studio_speaker'] %}
            media_player.studio_speaker
          {% elif who == 'main' %}
            media_player.ha_blue
          {% else %}
            {% if states.input_boolean.audible_notifications.state == 'on' %}
            media_player.ha_blue
            {% else %}
            media_player.kitchen_display
            {% endif %}
          {% endif %}
  - platform: template
    sensors:
      room_audio:
        friendly_name: "Room Audio"
        value_template: >-
          {% set sensor = 'main' %}
          {% if is_state('input_boolean.audible_notifications', 'on') %}
            {% set sensor = expand('group.occupancy') | selectattr('state', 'eq', 'on') | sort(attribute='last_changed') | last %}
            
          {% else %}

            {% set sensor = expand('group.occupancy_night') | sort(attribute='last_changed') | last %}

          {% endif %}

          {% if sensor.name in ['Master Bedroom Motion'] or sensor == 'master_bedroom' %}
            master_bedroom
          {% elif sensor.name in ['Kitchen Motion', 'Kitchen Motion', 'Bar Motion', 'Pantry Motion'] or sensor == 'kitchen' %}
            kitchen
          {% elif sensor.name in ['Living Room Motion','main'] or sensor == 'living_room' %}
            living_room
          {% elif sensor.name in ['Skylars Bedroom Motion' ] %}
            skylars_room
          {% elif sensor.name in ['Master Bedroom Motion' ] %}
            master_bedroom
          {% elif sensor.name in ['Studio Motion' ] %}
            studio
          {% elif is_state('media_player.theater_tv', 'on') or sensor == 'theater' or sensor.name in ['Theater Motion'] %}
            theater
          {% else %}
            {{ states('sensor.room_presence') }}
          {% endif %}
        
            
      alexa_audio:
        friendly_name: "Alexa Audio"
        value_template: >-
            {%- if is_state('sensor.last_alexa', 'media_player.living_room_echo') %}
              living_room
            {% elif is_state('sensor.last_alexa', 'media_player.kitchen_echo') %}
              kitchen
            {% elif is_state('sensor.last_alexa', 'media_player.skylar_s_bedroom') %}
              skylar_bedroom
            {% elif is_state('sensor.last_alexa', 'media_player.dads_desk') %}
              master_bedroom
            {% else %}
              main
            {%- endif %}sb
      last_alexa:
        value_template: >
          {{ states.media_player | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}