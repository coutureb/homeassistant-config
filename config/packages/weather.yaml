###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   02/19/2019
#   @package        :   Weather
#   @description    :   Weather and NWS Alerts
#   @original       :   https://github.com/Vasiley/Home-Assistant-Main/blob/master/packages/weather_alerts_nws.yaml
###############################################################################

homeassistant:
  customize:
    package.node_anchors:
      customize: &customize
        package: "weather_alerts"
    sensor.nws_alert_count:
      friendly_name: Alerts
      icon: mdi:alert-outline

weather:
  - platform: pirateweather
    api_key: !secret pirate_weather_api
    # Additional optional values:
    #latitude: Location latitude
    #longitude: Location longitude
    mode: "daily"
    name: Maison Des Lunes

group:
  alerts_card:
    name: Alerts
    entities:
      - sensor.nws_alerts

input_boolean:
  freeze_warning:
    name: Freeze Warning
    icon: mdi:snowflake-alert
  weather_alert_texts:
    name: Weather Alert Texts
    icon: mdi:telegram
  lightning_warning:
    name: Lightning Warning
    icon: mdi:flash-alert
  tornado_alarm:
    name: Tornado Alarm
    icon: mdi:speaker-wireless
  tstorm_alarm:
    name: T-Storm Alarm
    icon: mdi:speaker-wireless
  raining:
    name: Raining

utility_meter:
  recent_lightning_strikes:
    unique_id: recent_lightning_strikes
    source: sensor.acurite_6045m_under_deck_strcnt
    cycle: quarter-hourly
  daily_lightning_strikes:
    unique_id: daily_lightning_strikes
    source: sensor.acurite_6045m_under_deck_strcnt
    cycle: daily
  daily_rainfall_ut:
    unique_id: daily_rainfall_ut
    source: sensor.acurite_rain899_rain_gauge_rt
    cycle: daily
  daily_rainfall_ws_ut:
    unique_id: daily_rainfall_ws_ut
    source: sensor.acurite_5n1_865_rt
    cycle: daily
  weekly_rainfall_ut:
    unique_id: weekly_rainfall_ut
    source: sensor.acurite_rain899_rain_gauge_rt
    cycle: weekly
  weekly_rainfall_ws_ut:
    unique_id: weekly_rainfall_ws_ut
    source: sensor.acurite_5n1_865_rt
    cycle: weekly

  
template:
  - binary_sensor:
    - name: lightning_detected
      unique_id: lightning_detected_sensor
      state: >
        {% set strike_count = ((states('sensor.recent_lightning_strikes') | int) + (state_attr('sensor.recent_lightning_strikes','last_period') | int)) | round(0) %}
        {{ strike_count > 0 }}
      device_class: safety
  - binary_sensor:  
    - name: chill_hours
      unique_id: chill_hours_sensor
      state: >
        {{ states('sensor.acurite_5n1_865_f')  | int < 40 }}
      device_class: cold
  - binary_sensor:  
    - name: freeze_hours
      unique_id: freeze_hours_sensor
      state: >
        {{ states('sensor.acurite_5n1_865_f')  | int < 32 }}
      device_class: cold
  - sensor:
    - name: daily_rainfall_in
      unique_id: daily_rainfall_in
      state: >-
        {{((states('sensor.acurite_rain899_rain_gauge_rt') | float) - (states('sensor.rain_guage_start') | float) ) | round(1) }}
    - name: daily_rainfall_in_ws
      unique_id: daily_rainfall_in_ws
      state: >-
        {{((states('sensor.acurite_5n1_865_rt') | float) - (states('sensor.ws_rain_guage_start') | float) ) | round(1) }}
    - name: weekly_rainfall_in
      unique_id: weekly_rainfall_in
      state: >-
        {{((states('sensor.weekly_rainfall') | float) + (states('sensor.daily_rainfall_in_2') | float) ) | round(1) }}
    - name: adj_wind_speed
      state : >-
        {% set value = (states('sensor.acurite_5n1_865_ws') | int) * 2.2 | round  %}
        {{ value }}
    - name: current_forecast
      icon: mdi:weather-sunny
      state : >-
        {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
        {{ forecast.condition }}
      attributes:
        high_temp: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
          {{ forecast.temperature }}
        overnight_low: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
          {{ forecast.templow }}
        wind_bearing: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
          {{ forecast.wind_bearing }}
        wind_speed: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
          {{ forecast.wind_speed }}
        precipitation: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
          {{ forecast.precipitation }}
    - name: current_forecast_detail
      icon: mdi:weather-sunny
      state: >-
        {%- macro getReport() -%}
          {{ [
            'Today in Fayetteville ', 
            'Later Today ',
            'For the rest of the day'
            ] | random }}
          expect a high of {{ state_attr('sensor.current_forecast','high_temp') }}
          {%- if states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','off')%}
            {{ [
                'and sunny.', 
                'with sun.',
                'with sunny conditions prevailing.'
                ] | random }}
          {%- elif states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','on') %}
            {{ [
              'and clear.', 
              'with clear skies.'
              ] | random }}
          {%- elif states('sensor.current_forecast') == 'clear-night' %}
            {{ [
              'and clear.', 
              'with clear skies.'
              ] | random }}
          {%- elif states('sensor.current_forecast') == 'rainy' %}
            {{ [
              'with rain.', 
              'with showers.',
              'and rainy.'
              ] | random }}
            {{ [
              'Rainfall accumulations ', 
              'Total Rainfall amounts '
              ] | random }}
              near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.
          {%- elif states('sensor.current_forecast') == 'snowy' %}
            {{ [
              'with snow.', 
              'with snow showers.'
              ] | random }}
            {{ [
              'Snowfall accumulations ', 
              'Total snowfall amounts '
              ] | random }}
              near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.
          {%- elif states('sensor.current_forecast') == 'snowy-rainy' %}
            {{ [
                'with mix preciptation possible.', 
                'with snow and rain showers.'
                ] | random }}
            Total accumulation near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.    
          {%- elif states('sensor.current_forecast') == 'windy' %}
            {{ [
              'and windy.', 
              'with lots of wind.'
              ] | random }}
          {%- elif states('sensor.current_forecast') == 'fog' %}
            {{ [
              'and foggy.', 
              'with some fog.'
              ] | random }}
          {% elif states('sensor.current_forecast') == 'cloudy' %}
            {{ [
              'with clouds.', 
              'with cloudy skies.'
              ] | random }}
          {% elif states('sensor.current_forecast') == 'partlycloudy' %}
            {{ [
                'with some clouds.', 
                'with partly cloudy skies.',
                'with scattered clouds'
                ] | random }}
          {%- elif states('sensor.current_forecast') == 'hail' %}
            {{ [
              'with severve thunderstorms possible.', 
              'with hail possible.'
              ] | random }}
            {{ [
              'Rainfall accumulations ', 
              'Total Rainfall amounts '
              ] | random }}
              near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.
          {%- elif states('sensor.current_forecast') == 'lightning' %}
            {{ [
              'with thunderstorms possible.', 
              'with the potential of thunderstorms.'
              ] | random }}
            {{ [
              'Rainfall accumulations ', 
              'Total Rainfall amounts '
              ] | random }}
              near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.
          {% endif -%}

          {{ [
              ' Later tonight expect a low of ', 
              ' Overnight expect a low of '
              ] | random }}
          {{ state_attr('sensor.current_forecast','overnight_low') }} degrees. 
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}

    - name: tomorrow_forecast
      icon: mdi:weather-sunny
      state: >-
        {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
        {{ forecast.condition }}
      attributes:
        high_temp: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
          {{ forecast.temperature }}
        overnight_low: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[2] %}
          {{ forecast.templow }}
        wind_bearing: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
          {{ forecast.wind_bearing }}
        wind_speed: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
          {{ forecast.wind_speed }}
        precipitation: >-
          {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
            {{ forecast.precipitation }}


    - name: tomorrow_forecast_detail
      icon: mdi:weather-sunny
      state: >-
        {%- macro getReport() -%}
          {{ [
            'Tomorrow in Fayetteville ', 
            'For the next day ',
            'Tomorrow '
            ] | random }}
          expect a high of {{ state_attr('sensor.tomorrow_forecast','high_temp') }}
          {%- if states('sensor.tomorrow_forecast') == 'sunny' %}
            {{ [
                'and sunny.', 
                'with sun.',
                'with sunny conditions prevailing.'
                ] | random }}
          {%- elif states('sensor.tomorrow_forecast') == 'rainy' %}
            {{ [
              'with rain.', 
              'with showers.',
              'and rainy.'
              ] | random }}
            {{ [
              'Rainfall accumulations ', 
              'Total Rainfall amounts '
              ] | random }}
              near {{ state_attr('sensor.tomorrow_forecast','precipitation') }} inches
              possible.
          {%- elif states('sensor.tomorrow_forecast') == 'snowy' %}
            {{ [
              'with snow.', 
              'with snow showers.'
              ] | random }}
            {{ [
              'Snowfall accumulations ', 
              'Total snowfall amounts '
              ] | random }}
              near {{ state_attr('sensor.tomorrow_forecast','precipitation') }} inches
              possible.
          {%- elif states('sensor.tomorrow_forecast') == 'snowy-rainy' %}
            {{ [
                'with mix preciptation possible.', 
                'with snow and rain showers.'
                ] | random }}
            Total accumulation near {{ state_attr('sensor.tomorrow_forecast','precipitation') }} inches
              possible.    
          {%- elif states('sensor.tomorrow_forecast') == 'windy' %}
            {{ [
              'and windy.', 
              'with lots of wind.'
              ] | random }}
          {%- elif states('sensor.current_forecast') == 'fog' %}
            {{ [
              'and foggy.', 
              'with some fog.'
              ] | random }}
          {% elif states('sensor.tomorrow_forecast') == 'cloudy' %}
            {{ [
              'with clouds.', 
              'with cloudy skies.'
              ] | random }}
          {% elif states('sensor.tomorrow_forecast') == 'partlycloudy' %}
            {{ [
                'with some clouds.', 
                'with partly cloudy skies.',
                'with scattered clouds'
                ] | random }}
          {%- elif states('sensor.tomorrow_forecast') == 'hail' %}
            {{ [
              'with severve thunderstorms possible.', 
              'with hail possible.'
              ] | random }}
            {{ [
              'Rainfall accumulations ', 
              'Total Rainfall amounts '
              ] | random }}
              near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.
          {%- elif states('sensor.current_forecast') == 'lightning' %}
            {{ [
              'with thunderstorms possible.', 
              'with the potential of thunderstorms.'
              ] | random }}
            {{ [
              'Rainfall accumulations ', 
              'Total Rainfall amounts '
              ] | random }}
              near {{ state_attr('sensor.current_forecast','precipitation') }} inches
              possible.
          {% endif -%}

          {{ [
              ' Tomorrow night expect a low of '
              ] | random }}
          {{ state_attr('sensor.tomorrow_forecast','overnight_low') }} degrees. 
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}
    - name: current_conditions
      state: >-
        {%- macro getReport() -%}
          The Weather in Fayetteville
          {{ [
            ' is ', 
            ' is currently '
            ] | random }}
          {{states('sensor.ecowitt_wh53_back_porch_f')|round}} degrees 
          {% if is_state('weather.maison_des_lunes', 'rainy') %}
            {{ [
            'with rain.', 
            'with showers.'
            ] | random }}
          {% elif is_state('weather.maison_des_lunes', 'cloudy') %}
            {{ [
            'with clouds.', 
            'with cloudy skies.'
            ] | random }}
          {% elif is_state('weather.maison_des_lunes', 'partlycloudy') %}
            {{ [
            'with some clouds.', 
            'with partly cloudy skies.',
            'with scattered clouds.'
            ] | random }}
          {% elif is_state('weather.maison_des_lunes', 'sunny') %}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ [
              'and sunny.', 
              'with sun.'
              ] | random }}
            {% else %}
              {{ [
              'and clear.', 
              'with clear skies.'
              ] | random }}
            {% endif %}
          {% else %}
            and {{ states('weather.maison_des_lunes') }}
          {% endif %}
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}
    - name: current_conditions_detail
      state: >-
        {%- macro getReport() -%}
          The Weather in Fayetteville
            {{ [
            ' is ', 
            ' is currently '
            ] | random }}
            {{states('sensor.acurite_5n1_865_f')|round}} degrees 
          {% if is_state('weather.home', 'rainy') %}
            {{ [
            'with rain.', 
            'with showers.'
            ] | random }}
          {% elif is_state('weather.home', 'cloudy') %}
            {{ [
            'with clouds.', 
            'with cloudy skies.'
            ] | random }}
          {% elif is_state('weather.home', 'partlycloudy') %}
            {{ [
            'with some clouds.', 
            'with partly cloudy skies.',
            'with scatterd clouds'
            ] | random }}
          {% elif is_state('weather.home', 'sunny') %}
            {% if is_state('sun.sun', 'above_horizon') %}
              {{ [
              'and sunny.', 
              'with sun.'
              ] | random }}
            {% else %}
              {{ [
              'and clear.', 
              'with clear skies.'
              ] | random }}
            {% endif %}
          {% else %}
            and {{ states('weather.maison_des_lunes') }}.
          {% endif %}
          {%- if is_state('binary_sensor.night','off')%}
            {{ [ 
              'Later Today, ',
              'For the rest of the day,'
              ] | random }}
            expect a high of {{ state_attr('sensor.current_forecast','high_temp') }}
            {%- if states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','off')%}
              {{ [
                  'and sunny.', 
                  'with sun.',
                  'with sunny conditions prevailing.'
                  ] | random }}
            {%- elif states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','on') %}
              {{ [
                'and clear.', 
                'with clear skies.'
                ] | random }}
            {%- elif states('sensor.current_forecast') == 'clear-night' %}
              {{ [
                'and clear.', 
                'with clear skies.'
                ] | random }}
            {%- elif states('sensor.current_forecast') == 'rainy' %}
              {{ [
                'with rain.', 
                'with showers.',
                'and rainy.'
                ] | random }}
              {{ [
                'Rainfall accumulations ', 
                'Total Rainfall amounts '
                ] | random }}
                near {{ state_attr('sensor.current_forecast','precipitation') }} inches
                possible.
            {%- elif states('sensor.current_forecast') == 'snowy' %}
              {{ [
                'with snow.', 
                'with snow showers.'
                ] | random }}
              {{ [
                'Snowfall accumulations ', 
                'Total snowfall amounts '
                ] | random }}
                near {{ state_attr('sensor.current_forecast','precipitation') }} inches
                possible.
            {%- elif states('sensor.current_forecast') == 'snowy-rainy' %}
              {{ [
                  'with mix preciptation possible.', 
                  'with snow and rain showers.'
                  ] | random }}
              Total accumulation near {{ state_attr('sensor.current_forecast','precipitation') }} inches
                possible.    
            {%- elif states('sensor.current_forecast') == 'windy' %}
              {{ [
                'and windy.', 
                'with lots of wind.'
                ] | random }}
            {%- elif states('sensor.current_forecast') == 'fog' %}
              {{ [
                'and foggy.', 
                'with some fog.'
                ] | random }}
            {% elif states('sensor.current_forecast') == 'cloudy' %}
              {{ [
                'with clouds.', 
                'with cloudy skies.'
                ] | random }}
            {% elif states('sensor.current_forecast') == 'partlycloudy' %}
              {{ [
                  'with some clouds.', 
                  'with partly cloudy skies.',
                  'with scattered clouds'
                  ] | random }}
            {%- elif states('sensor.current_forecast') == 'hail' %}
              {{ [
                'with severve thunderstorms possible.', 
                'with hail possible.'
                ] | random }}
              {{ [
                'Rainfall accumulations ', 
                'Total Rainfall amounts '
                ] | random }}
                near {{ state_attr('sensor.current_forecast','precipitation') }} inches
                possible.
            {%- elif states('sensor.current_forecast') == 'lightning' %}
              {{ [
                'with thunderstorms possible.', 
                'with the potential of thunderstorms.'
                ] | random }}
              {{ [
                'Rainfall accumulations ', 
                'Total Rainfall amounts '
                ] | random }}
                near {{ state_attr('sensor.current_forecast','precipitation') }} inches
                possible.
            {% endif -%}

            {{ [
                ' Later tonight, expect a low of ', 
                ' Overnight, expect a low of '
                ] | random }}
            {{ state_attr('sensor.current_forecast','overnight_low') }} degrees. 
        {%- else -%}
          {{ [
                ' Tonight, expect a low of ', 
                ' Overnight, expect a low of '
                ] | random }}
            {{ state_attr('sensor.current_forecast','overnight_low') }} degrees.
        {% endif %} 
        {%- endmacro -%}
        {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
          {%- macro cleanup(data) -%}
            {%- for item in data.split("\n")  if item | trim != "" -%}
              {{ item | trim }} {% endfor -%}
        {%- endmacro -%}

        {# a macro to call all macros :)  #}
          {%- macro mother_of_all_macros() -%}
            {{ getReport() }}
          {%- endmacro -%}
          
          {# Call the macro  #}
          {{- cleanup(mother_of_all_macros()) -}}
    - name: outside_pressure
      state: "{{ state_attr('weather.maison_des_lunes','pressure') }}"
    - name: todays_high_temp
      device_class: temperature
      state: >-
            {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
            {{ forecast.temperature }}
    - name: tonights_low_temp
      device_class: temperature
      state: >-
        {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
        {{ forecast.templow }}
    - name: clothing_forecast
      state: >-
            {% if is_state('binary_sensor.overnight', 'off') %}
              {% set temp = states('sensor.todays_high_temp')|int %}
            {% else %}  
              {% set temp = states('sensor.acurite_5n1_865_f')|round %}
            {% endif %}
            {%- if temp|int > 63 %}
              {%- if temp|int < 80 %}
                Nice
              {% elif temp|int > 95 %}
                Hot
              {% else %}
                Toasty
              {%- endif %}
            {% elif temp|int < 64 %}
              {%- if temp|int < 35 %}
                Freezing
              {% elif temp|int > 50 %}
                Chilly
              {% else %}
                Cold
              {%- endif %}
            {% else %}
              Unknown
            {%- endif %}

    - name: clothing_forecast_detail
      state: >-
        {% if is_state('binary_sensor.morning','on') %}
          A little later the high temperature should be near {{ states('sensor.todays_high_temp') }}. 
          {% if is_state('sensor.clothing_forecast', 'Freezing') %} 
            so I suggest wearing long pants and a heavy coat.
          {% elif is_state('sensor.clothing_forecast','Cold') %} 
            so I suggest wearing long pants and a light jacket.
          {% elif is_state('sensor.clothing_forecast', 'Chilly') %}
            so I suggest wearing at least long pants.
          {% elif is_state('sensor.clothing_forecast', 'Nice') %}
            {{ [ 
              'Which means it is '
            ] | random }}         
            {{ [ 'almost perfect outside. ',
              'pretty nice outside. ',
              'a good day to be outside. ',
              'rather enjoyable outside. ',
            ] | random }} 
            I suggest wearing shorts.
          {% elif is_state('sensor.clothing_forecast', 'Toasty') %}
            {{ [ 'That is ',
              'Which means it is ',
              'That is going to be '
            ] | random }} 
            {{ [ 'a bit warm. ',
              ' rather warm outside. ',
              ' almost too hot outside. ',
              ' a little warm. ',
            ] | random }} 
            so I suggest wearing shorts. 
          {% elif is_state('sensor.clothing_forecast', 'Hot') %}
            {{ [ 'That is ',
              'Which means it is ',
              'That is going to be '
            ] | random }} 
            {{ [ 'hot.',
              'hotter than the sun. ',
              'hotter than hot. but in a lot of bad ways. ',
              'hotter than the sun outside. ',
              'super hot. ',
              'hotter than the inside of a volcano. '
            ] | random }} 
            so I suggest wearing shorts.
          {% else %}
              {{ [ 'That is ',
              'Which means it is ',
              'That is going to be '
            ] | random }} 
              {{ states.sensor.clothing_forecast.state }} today so I suggest wearing shorts.
          {% endif %} 
        {% else %}
          Based on the current temperature. 
          {% if is_state('sensor.clothing_forecast', 'Freezing') %}
            It is freezing. so I suggest wearing long pants and a heavy coat if you are going out.
          {% elif is_state('sensor.clothing_forecast','Cold') %}
            It is cold outside. so I suggest wearing long pants and a light jacket.
          {% elif is_state('sensor.clothing_forecast', 'Chilly') %}
            It is chilly right now. so I suggest wearing at least long pants 
            if you are going to venture outside.
          {% elif is_state('sensor.clothing_forecast', 'Nice') %}
            It is            
            {{ [ 'nice outside. ',
              'pretty nice outside. ',
              'a good day to be outside. ',
              'rather enjoyable outside. ',
            ] | random }} 
            So I suggest wearing shorts.
          {% elif is_state('sensor.clothing_forecast', 'Toasty') %}
            It is 
            {{ [ 'a bit warm ',
              ' rather warm ',
              ' almost too hot ',
              ' a little warm ',
            ] | random }} 
            outside. So I suggest wearing shorts. 
          {% elif is_state('sensor.clothing_forecast', 'Hot') %}
            It is 
            {{ [ 'hot',
              'hotter than the sun ',
              'hotter than hot. but in a lot of bad ways ',
              'hotter than the sun outside ',
              'super hot ',
              'hotter than the inside of a volcano '
            ] | random }} 
            outside. So I suggest wearing shorts.
          {% else %}
            It is {{ states.sensor.clothing_forecast.state }} right now. so I suggest wearing shorts.
          {% endif %} 
        {% endif %}
    - name: nws_current_visibility
      state: "{{ ((state_attr('weather.maison_des_lunes','visibility') | int) * 0.621371) | round }}"

    - name: sun_status
      state: >-
        {%- if is_state('sun.sun', 'below_horizon') -%}
          You have  
          {%- set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() -%}
          {% set hours = seconds / 60 -%}
          {%- if seconds / ( 60 * 60 ) > 1 -%}
            {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
          {%- else -%}
            {{""}} {{ (seconds // 60) | int }} minutes
          {%- endif -%}
          {{ [
            ' until the sun rises.',
            ' until the sun is up.',
            ' before the sun officially rises. '
          ]|random }}
        {%- else %}
          You have 
          {%- set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %}
          {%- set hours = seconds / 60 -%}
          {%- if seconds / ( 60 * 60 ) > 1 -%}
            {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
          {%- else -%}
            {{""}} {{ (seconds // 60) | int }} minutes
          {%- endif -%}
          {{ [
            ' until the sun sets for the day.',
            ' until the sun slips below the horizon.',
            ' before the sun officially sets. '
          ]|random }}
        {%- endif -%}

    - name: current_inside_humidity
      unit_of_measurement: "%"
      state: "{{ state_attr('climate.main_floor','current_humidity') }}"
    - name: lightning_stike_count
      state: "{{ states('sensor.acurite_6045m_under_deck_strcnt') | int }}"
      state_class: 'total_increasing'
    - name: adj_wind_speed_clean
      unique_id: adj_wind_speed_clean
      state_class: measurement
      state: >
        {% if has_value('sensor.adj_wind_speed') %}
          {{ states('sensor.adj_wind_speed') | int }}
        {% else %}
          0
        {% endif %}
    - name: yesterday_rainfall_in_ut
      unique_id: "yesterday_rainfall_in_ut"
      state: "{{ state_attr('sensor.daily_rainfall_ws_ut', 'last_period') }}"

# MQTT Stored Sensors
mqtt:
  sensor:
    - name: "Max Wind Gust"
      state_topic: "house/weather/maxwind"
    - name: "ATH Wind Gust"
      state_topic: "house/weather/athwind"
    - name: "Total Rain Fall"
      state_topic: "house/weather/totalrainfall"
    - name: "ATH 24h Rain"
      state_topic: "house/weather/athdailyrain"
    - name: "Days with Rain"
      state_topic: "house/weather/daysrain"
    - name: "Total Lighnting Strikes"
      state_topic: "house/weather/totalstrikes" 
    - name: "Max Lightning Strikes"
      state_topic: "house/weather/maxstrikes"
    - name: "Max Temp"
      state_topic: "house/weather/maxtemp"
    - name: "Low Temp"
      state_topic: "house/weather/lowtemp"
    - name: "ATH Max Temp"
      state_topic: "house/weather/athmaxtemp"
    - name: "ATH Low Temp"
      state_topic: "house/weather/athlowtemp"
    - name: "Monthly Max Temp"
      state_topic: "house/weather/monthlymaxtemp"
    - name: "Monthly Low Temp"
      state_topic: "house/weather/monthlylowtemp"
    - name: "Chill Hours"
      state_topic: "house/weather/chillhours"
    - name: "Freeze Hours"
      state_topic: "house/weather/freezehours" 
    - name: "Rain Guage Start"
      state_topic: "house/weather/rain_guage_start"
    - name: "WS Rain Guage Start"
      state_topic: "house/weather/rain_guage_ws_start"
    - name: "Yesterday Rainfall"
      state_topic: "house/weather/yesterday_rainfall_in"
    - name: "Weekly Rainfall"
      state_topic: "house/weather/weekly_rainfall"
    - name: "ws_wind_speed"
      unique_id: ws_wind_speed
      state_topic: "house/weather/new_wind_speed"

sensor:
  - platform: weatheralerts
    state: GA
    zone: 54
    county: 113
    scan_interval: 30
  - platform: pirateweather
    api_key: !secret pirate_weather_api
    scan_interval: "00:15:00"
    monitored_conditions:
      - temperature
      - precip_probability
      - precip_type
      - humidity
      - cloud_cover
      - nearest_storm_distance
      - precip_intensity
      - wind_speed
      - temperature
  - platform: statistics
    name: Inside Humidity Stats
    entity_id: sensor.current_inside_humidity
    state_characteristic: mean
    sampling_size: 500
  - platform: history_stats
    name: Chill Time Yesterday
    entity_id: binary_sensor.chill_hours
    state: "on"
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    duration:
      hours: 24
  - platform: history_stats
    name: Freeze Time Yesterday
    entity_id: binary_sensor.freeze_hours
    state: "on"
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    duration:
      hours: 24
  - platform: statistics
    name: "Daily Avg Wind Speed"
    entity_id: sensor.adj_wind_speed_clean
    state_characteristic: mean
    max_age:
      hours: 24
  - platform: statistics
    name: "Avg Wind Speed"
    entity_id: sensor.ws_wind_speed
    state_characteristic: mean
    max_age:
      minutes: 10
  - platform: statistics
    name: "Daily Max Wind Speed"
    entity_id: sensor.adj_wind_speed
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Max Temp"
    entity_id: sensor.acurite_5n1_865_f
    state_characteristic: value_max
    max_age:
      hours: 24
  - platform: statistics
    name: "Daily Low Temp"
    entity_id: sensor.acurite_5n1_865_f
    state_characteristic: value_min
    max_age:
      hours: 24
  - platform: statistics
    name: "Rainfall Last 24h"
    unique_id: rainfall_last_24h
    entity_id: sensor.acurite_rain899_rain_gauge_rt
    state_characteristic: change
    max_age:
      hours: 24
    precision: 1
  - platform: statistics
    name: "WS Rainfall Last 24h"
    unique_id: ws_rainfall_last_24h
    entity_id: sensor.acurite_5n1_865_rt
    state_characteristic: change
    max_age:
      hours: 24
    precision: 1
  - platform: statistics
    name: "Rainfall Last Week"
    unique_id: rainfall_last_week
    entity_id: sensor.acurite_rain899_rain_gauge_rt
    state_characteristic: change
    max_age:
      days: 7
    precision: 1
  - platform: statistics
    name: "WS Rainfall Last Week"
    unique_id: ws_rainfall_last_week
    entity_id: sensor.acurite_5n1_865_rt
    state_characteristic: change
    max_age:
      days: 7
    precision: 1
  


  # - platform: template
  #   sensors:
      # adj_wind_speed:
      #   friendly_name: Adjusted Wind Speed
      #   unit_of_measurement: mph
      #   value_template: >-
      #     {% set value = (states('sensor.acurite_5n1_865_ws') | int) * 2.8 | round  %}
      #     {{ value }}
      # current_forecast:
      #   friendly_name: Current Forecast
      #   unit_of_measurement: ""
      #   icon_template: mdi:weather-sunny
      #   value_template: >-
      #     {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
      #     {{ forecast.condition }}
      #   attribute_templates:
      #     high_temp: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
      #       {{ forecast.temperature }}
      #     overnight_low: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #       {{ forecast.templow }}
      #     wind_bearing: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
      #       {{ forecast.wind_bearing }}
      #     wind_speed: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
      #       {{ forecast.wind_speed }}
      #     precipitation: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
      #       {{ forecast.precipitation }}
      # current_forecast_detail:
      #   friendly_name: Current Forecast Detail
      #   unit_of_measurement: ""
      #   icon_template: mdi:weather-sunny
      #   value_template: >-
      #     {%- macro getReport() -%}
      #       {{ [
      #         'Today in Fayetteville ', 
      #         'Later Today ',
      #         'For the rest of the day'
      #         ] | random }}
      #       expect a high of {{ state_attr('sensor.current_forecast','high_temp') }}
      #       {%- if states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','off')%}
      #         {{ [
      #             'and sunny.', 
      #             'with sun.',
      #             'with sunny conditions prevailing.'
      #             ] | random }}
      #       {%- elif states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','on') %}
      #         {{ [
      #           'and clear.', 
      #           'with clear skies.'
      #           ] | random }}
      #       {%- elif states('sensor.current_forecast') == 'clear-night' %}
      #         {{ [
      #           'and clear.', 
      #           'with clear skies.'
      #           ] | random }}
      #       {%- elif states('sensor.current_forecast') == 'rainy' %}
      #         {{ [
      #           'with rain.', 
      #           'with showers.',
      #           'and rainy.'
      #           ] | random }}
      #         {{ [
      #           'Rainfall accumulations ', 
      #           'Total Rainfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.
      #       {%- elif states('sensor.current_forecast') == 'snowy' %}
      #         {{ [
      #           'with snow.', 
      #           'with snow showers.'
      #           ] | random }}
      #         {{ [
      #           'Snowfall accumulations ', 
      #           'Total snowfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.
      #       {%- elif states('sensor.current_forecast') == 'snowy-rainy' %}
      #         {{ [
      #             'with mix preciptation possible.', 
      #             'with snow and rain showers.'
      #             ] | random }}
      #         Total accumulation near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.    
      #       {%- elif states('sensor.current_forecast') == 'windy' %}
      #         {{ [
      #           'and windy.', 
      #           'with lots of wind.'
      #           ] | random }}
      #       {%- elif states('sensor.current_forecast') == 'fog' %}
      #         {{ [
      #           'and foggy.', 
      #           'with some fog.'
      #           ] | random }}
      #       {% elif states('sensor.current_forecast') == 'cloudy' %}
      #         {{ [
      #           'with clouds.', 
      #           'with cloudy skies.'
      #           ] | random }}
      #       {% elif states('sensor.current_forecast') == 'partlycloudy' %}
      #         {{ [
      #             'with some clouds.', 
      #             'with partly cloudy skies.',
      #             'with scattered clouds'
      #             ] | random }}
      #       {%- elif states('sensor.current_forecast') == 'hail' %}
      #         {{ [
      #           'with severve thunderstorms possible.', 
      #           'with hail possible.'
      #           ] | random }}
      #         {{ [
      #           'Rainfall accumulations ', 
      #           'Total Rainfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.
      #       {%- elif states('sensor.current_forecast') == 'lightning' %}
      #         {{ [
      #           'with thunderstorms possible.', 
      #           'with the potential of thunderstorms.'
      #           ] | random }}
      #         {{ [
      #           'Rainfall accumulations ', 
      #           'Total Rainfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.
      #       {% endif -%}

      #       {{ [
      #           ' Later tonight expect a low of ', 
      #           ' Overnight expect a low of '
      #           ] | random }}
      #       {{ state_attr('sensor.current_forecast','overnight_low') }} degrees. 
      #     {%- endmacro -%}
      #     {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
      #       {%- macro cleanup(data) -%}
      #         {%- for item in data.split("\n")  if item | trim != "" -%}
      #           {{ item | trim }} {% endfor -%}
      #     {%- endmacro -%}

      #     {# a macro to call all macros :)  #}
      #       {%- macro mother_of_all_macros() -%}
      #         {{ getReport() }}
      #       {%- endmacro -%}
            
      #       {# Call the macro  #}
      #       {{- cleanup(mother_of_all_macros()) -}}
      # tomorrow_forecast:
      #   friendly_name: Tomorrows Forecast
      #   unit_of_measurement: ""
      #   icon_template: mdi:weather-sunny
      #   value_template: >-
      #     {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #     {{ forecast.condition }}
      #   attribute_templates:
      #     high_temp: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #       {{ forecast.temperature }}
      #     overnight_low: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[2] %}
      #       {{ forecast.templow }}
      #     wind_bearing: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #       {{ forecast.wind_bearing }}
      #     wind_speed: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #       {{ forecast.wind_speed }}
      #     precipitation: >-
      #       {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #        {{ forecast.precipitation }}
      # tomorrow_forecast_detail:
      #   friendly_name: Tomorrow Forecast Detail
      #   unit_of_measurement: ""
      #   icon_template: mdi:weather-sunny
      #   value_template: >-
      #     {%- macro getReport() -%}
      #       {{ [
      #         'Tomorrow in Fayetteville ', 
      #         'For the next day ',
      #         'Tomorrow '
      #         ] | random }}
      #       expect a high of {{ state_attr('sensor.tomorrow_forecast','high_temp') }}
      #       {%- if states('sensor.tomorrow_forecast') == 'sunny' %}
      #         {{ [
      #             'and sunny.', 
      #             'with sun.',
      #             'with sunny conditions prevailing.'
      #             ] | random }}
      #       {%- elif states('sensor.tomorrow_forecast') == 'rainy' %}
      #         {{ [
      #           'with rain.', 
      #           'with showers.',
      #           'and rainy.'
      #           ] | random }}
      #         {{ [
      #           'Rainfall accumulations ', 
      #           'Total Rainfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.tomorrow_forecast','precipitation') }} inches
      #           possible.
      #       {%- elif states('sensor.tomorrow_forecast') == 'snowy' %}
      #         {{ [
      #           'with snow.', 
      #           'with snow showers.'
      #           ] | random }}
      #         {{ [
      #           'Snowfall accumulations ', 
      #           'Total snowfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.tomorrow_forecast','precipitation') }} inches
      #           possible.
      #       {%- elif states('sensor.tomorrow_forecast') == 'snowy-rainy' %}
      #         {{ [
      #             'with mix preciptation possible.', 
      #             'with snow and rain showers.'
      #             ] | random }}
      #         Total accumulation near {{ state_attr('sensor.tomorrow_forecast','precipitation') }} inches
      #           possible.    
      #       {%- elif states('sensor.tomorrow_forecast') == 'windy' %}
      #         {{ [
      #           'and windy.', 
      #           'with lots of wind.'
      #           ] | random }}
      #       {%- elif states('sensor.current_forecast') == 'fog' %}
      #         {{ [
      #           'and foggy.', 
      #           'with some fog.'
      #           ] | random }}
      #       {% elif states('sensor.tomorrow_forecast') == 'cloudy' %}
      #         {{ [
      #           'with clouds.', 
      #           'with cloudy skies.'
      #           ] | random }}
      #       {% elif states('sensor.tomorrow_forecast') == 'partlycloudy' %}
      #         {{ [
      #             'with some clouds.', 
      #             'with partly cloudy skies.',
      #             'with scattered clouds'
      #             ] | random }}
      #       {%- elif states('sensor.tomorrow_forecast') == 'hail' %}
      #         {{ [
      #           'with severve thunderstorms possible.', 
      #           'with hail possible.'
      #           ] | random }}
      #         {{ [
      #           'Rainfall accumulations ', 
      #           'Total Rainfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.
      #       {%- elif states('sensor.current_forecast') == 'lightning' %}
      #         {{ [
      #           'with thunderstorms possible.', 
      #           'with the potential of thunderstorms.'
      #           ] | random }}
      #         {{ [
      #           'Rainfall accumulations ', 
      #           'Total Rainfall amounts '
      #           ] | random }}
      #           near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #           possible.
      #       {% endif -%}

      #       {{ [
      #           ' Tomorrow night expect a low of '
      #           ] | random }}
      #       {{ state_attr('sensor.tomorrow_forecast','overnight_low') }} degrees. 
      #     {%- endmacro -%}
      #     {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
      #       {%- macro cleanup(data) -%}
      #         {%- for item in data.split("\n")  if item | trim != "" -%}
      #           {{ item | trim }} {% endfor -%}
      #     {%- endmacro -%}

      #     {# a macro to call all macros :)  #}
      #       {%- macro mother_of_all_macros() -%}
      #         {{ getReport() }}
      #       {%- endmacro -%}
            
      #       {# Call the macro  #}
      #       {{- cleanup(mother_of_all_macros()) -}}
      # current_conditions:
      #   friendly_name: Current Conditions
      #   unit_of_measurement: ""
      #   icon_template: mdi:weather-sunny
      #   value_template: >-
      #     {%- macro getReport() -%}
      #       The Weather in Fayetteville
      #       {{ [
      #         ' is ', 
      #         ' is currently '
      #         ] | random }}
      #       {{states('sensor.ecowitt_wh53_back_porch_f')|round}} degrees 
      #       {% if is_state('weather.maison_des_lunes', 'rainy') %}
      #         {{ [
      #         'with rain.', 
      #         'with showers.'
      #         ] | random }}
      #       {% elif is_state('weather.maison_des_lunes', 'cloudy') %}
      #         {{ [
      #         'with clouds.', 
      #         'with cloudy skies.'
      #         ] | random }}
      #       {% elif is_state('weather.maison_des_lunes', 'partlycloudy') %}
      #         {{ [
      #         'with some clouds.', 
      #         'with partly cloudy skies.',
      #         'with scattered clouds.'
      #         ] | random }}
      #       {% elif is_state('weather.maison_des_lunes', 'sunny') %}
      #         {% if is_state('sun.sun', 'above_horizon') %}
      #           {{ [
      #           'and sunny.', 
      #           'with sun.'
      #           ] | random }}
      #         {% else %}
      #           {{ [
      #           'and clear.', 
      #           'with clear skies.'
      #           ] | random }}
      #         {% endif %}
      #       {% else %}
      #         and {{ states.weather.maison_de_lune.state }}
      #       {% endif %}
      #     {%- endmacro -%}
      #     {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
      #       {%- macro cleanup(data) -%}
      #         {%- for item in data.split("\n")  if item | trim != "" -%}
      #           {{ item | trim }} {% endfor -%}
      #     {%- endmacro -%}

      #     {# a macro to call all macros :)  #}
      #       {%- macro mother_of_all_macros() -%}
      #         {{ getReport() }}
      #       {%- endmacro -%}
            
      #       {# Call the macro  #}
      #       {{- cleanup(mother_of_all_macros()) -}}
      # current_conditions_detail:
      #   friendly_name: Current Conditions Detail
      #   unit_of_measurement: ""
      #   icon_template: mdi:weather-sunny
      #   value_template: >-
      #     {%- macro getReport() -%}
      #       The Weather in Fayetteville
      #        {{ [
      #         ' is ', 
      #         ' is currently '
      #         ] | random }}
      #        {{states('sensor.acurite_5n1_865_f')|round}} degrees 
      #       {% if is_state('weather.home', 'rainy') %}
      #         {{ [
      #         'with rain.', 
      #         'with showers.'
      #         ] | random }}
      #       {% elif is_state('weather.home', 'cloudy') %}
      #         {{ [
      #         'with clouds.', 
      #         'with cloudy skies.'
      #         ] | random }}
      #       {% elif is_state('weather.home', 'partlycloudy') %}
      #         {{ [
      #         'with some clouds.', 
      #         'with partly cloudy skies.',
      #         'with scatterd clouds'
      #         ] | random }}
      #       {% elif is_state('weather.home', 'sunny') %}
      #         {% if is_state('sun.sun', 'above_horizon') %}
      #           {{ [
      #           'and sunny.', 
      #           'with sun.'
      #           ] | random }}
      #         {% else %}
      #           {{ [
      #           'and clear.', 
      #           'with clear skies.'
      #           ] | random }}
      #         {% endif %}
      #       {% else %}
      #         and {{ states.weather.home.state }}
      #       {% endif %}
      #       {%- if is_state('binary_sensor.night','off')%}
      #         {{ [ 
      #           'Later Today ',
      #           'For the rest of the day'
      #           ] | random }}
      #         expect a high of {{ state_attr('sensor.current_forecast','high_temp') }}
      #         {%- if states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','off')%}
      #           {{ [
      #               'and sunny.', 
      #               'with sun.',
      #               'with sunny conditions prevailing.'
      #               ] | random }}
      #         {%- elif states('sensor.current_forecast') == 'sunny' and is_state('binary_sensor.night','on') %}
      #           {{ [
      #             'and clear.', 
      #             'with clear skies.'
      #             ] | random }}
      #         {%- elif states('sensor.current_forecast') == 'clear-night' %}
      #           {{ [
      #             'and clear.', 
      #             'with clear skies.'
      #             ] | random }}
      #         {%- elif states('sensor.current_forecast') == 'rainy' %}
      #           {{ [
      #             'with rain.', 
      #             'with showers.',
      #             'and rainy.'
      #             ] | random }}
      #           {{ [
      #             'Rainfall accumulations ', 
      #             'Total Rainfall amounts '
      #             ] | random }}
      #             near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #             possible.
      #         {%- elif states('sensor.current_forecast') == 'snowy' %}
      #           {{ [
      #             'with snow.', 
      #             'with snow showers.'
      #             ] | random }}
      #           {{ [
      #             'Snowfall accumulations ', 
      #             'Total snowfall amounts '
      #             ] | random }}
      #             near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #             possible.
      #         {%- elif states('sensor.current_forecast') == 'snowy-rainy' %}
      #           {{ [
      #               'with mix preciptation possible.', 
      #               'with snow and rain showers.'
      #               ] | random }}
      #           Total accumulation near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #             possible.    
      #         {%- elif states('sensor.current_forecast') == 'windy' %}
      #           {{ [
      #             'and windy.', 
      #             'with lots of wind.'
      #             ] | random }}
      #         {%- elif states('sensor.current_forecast') == 'fog' %}
      #           {{ [
      #             'and foggy.', 
      #             'with some fog.'
      #             ] | random }}
      #         {% elif states('sensor.current_forecast') == 'cloudy' %}
      #           {{ [
      #             'with clouds.', 
      #             'with cloudy skies.'
      #             ] | random }}
      #         {% elif states('sensor.current_forecast') == 'partlycloudy' %}
      #           {{ [
      #               'with some clouds.', 
      #               'with partly cloudy skies.',
      #               'with scattered clouds'
      #               ] | random }}
      #         {%- elif states('sensor.current_forecast') == 'hail' %}
      #           {{ [
      #             'with severve thunderstorms possible.', 
      #             'with hail possible.'
      #             ] | random }}
      #           {{ [
      #             'Rainfall accumulations ', 
      #             'Total Rainfall amounts '
      #             ] | random }}
      #             near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #             possible.
      #         {%- elif states('sensor.current_forecast') == 'lightning' %}
      #           {{ [
      #             'with thunderstorms possible.', 
      #             'with the potential of thunderstorms.'
      #             ] | random }}
      #           {{ [
      #             'Rainfall accumulations ', 
      #             'Total Rainfall amounts '
      #             ] | random }}
      #             near {{ state_attr('sensor.current_forecast','precipitation') }} inches
      #             possible.
      #         {% endif -%}

      #         {{ [
      #             'Later tonight expect a low of ', 
      #             'Overnight expect a low of '
      #             ] | random }}
      #         {{ state_attr('sensor.current_forecast','overnight_low') }} degrees. 
      #     {%- else -%}
      #       {{ [
      #             'Tonight expect a low of ', 
      #             'Overnight expect a low of '
      #             ] | random }}
      #         {{ state_attr('sensor.current_forecast','overnight_low') }} degrees.
      #     {% endif %} 
      #     {%- endmacro -%}
      #     {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
      #       {%- macro cleanup(data) -%}
      #         {%- for item in data.split("\n")  if item | trim != "" -%}
      #           {{ item | trim }} {% endfor -%}
      #     {%- endmacro -%}

      #     {# a macro to call all macros :)  #}
      #       {%- macro mother_of_all_macros() -%}
      #         {{ getReport() }}
      #       {%- endmacro -%}
            
      #       {# Call the macro  #}
      #       {{- cleanup(mother_of_all_macros()) -}}
      # outside_pressure:
      #   friendly_name: "outisde pressure"
      #   value_template: "{{ state_attr('weather.maison_des_lunes','pressure') }}"
      #   unit_of_measurement: ""
      # todays_high_temp:
      #   friendly_name: "Today's High Temp"
      #   unit_of_measurement: ""
      #   device_class: temperature
      #   value_template: >-
      #     {% set forecast = state_attr('weather.maison_des_lunes','forecast')[0] %}
      #     {{ forecast.temperature }}
      # tonights_low_temp:
      #   friendly_name: "Tonight's Low Temp"
      #   unit_of_measurement: ""
      #   device_class: temperature
      #   value_template: >-
      #     {% set forecast = state_attr('weather.maison_des_lunes','forecast')[1] %}
      #     {{ forecast.templow }}
      # clothing_forecast:
      #   friendly_name: "Clothing Forecast"
      #   unit_of_measurement: ""
      #   value_template: >-
      #     {% if is_state('binary_sensor.overnight', 'off') %}
      #       {% set temp = states('sensor.todays_high_temp')|int %}
      #     {% else %}  
      #       {% set temp = states('sensor.acurite_5n1_865_f')|round %}
      #     {% endif %}
      #     {%- if states('sensor.todays_high_temp')|int > 63 %}
      #       {%- if states('sensor.todays_high_temp')|int < 80 %}
      #         Nice
      #       {% elif states('sensor.todays_high_temp')|int > 95 %}
      #         Hot
      #       {% else %}
      #         Toasty
      #       {%- endif %}
      #     {% elif states('sensor.todays_high_temp')|int < 64 %}
      #       {%- if states('sensor.todays_high_temp')|int < 32 %}
      #         Freezing
      #       {% elif states('sensor.todays_high_temp')|int > 50 %}
      #         Chilly
      #       {% else %}
      #         Cold
      #       {%- endif %}
      #     {% else %}
      #       Unknown
      #     {%- endif %}

      # clothing_forecast_detail:
      #   friendly_name: "Clothing Forecast Detail"
      #   unit_of_measurement: ""
      #   value_template: >-
      #     {% if is_state('binary_sensor.morning','on') %}
      #       A little later the high temperature should be near {{ states('sensor.todays_high_temp') }}. 
      #       {% if is_state('sensor.clothing_forecast', 'Freezing') %} 
      #         so I suggest wearing long pants and a heavy coat.
      #       {% elif is_state('sensor.clothing_forecast','Cold') %} 
      #         so I suggest wearing long pants and a light jacket.
      #       {% elif is_state('sensor.clothing_forecast', 'Chilly') %}
      #         so I suggest wearing at least long pants.
      #       {% elif is_state('sensor.clothing_forecast', 'Nice') %}
      #         {{ [ 
      #           'Which means it is '
      #         ] | random }}         
      #         {{ [ 'almost perfect outside. ',
      #           'pretty nice outside. ',
      #           'a good day to be outside. ',
      #           'rather enjoyable outside. ',
      #         ] | random }} 
      #         I suggest wearing shorts.
      #       {% elif is_state('sensor.clothing_forecast', 'Toasty') %}
      #         {{ [ 'That is ',
      #           'Which means it is ',
      #           'That is going to be '
      #         ] | random }} 
      #         {{ [ 'a bit warm, ',
      #           ' rather warm outside, ',
      #           ' almost too hot outside, ',
      #           ' a little warm, ',
      #         ] | random }} 
      #         so I suggest wearing shorts. 
      #       {% elif is_state('sensor.clothing_forecast', 'Hot') %}
      #         {{ [ 'That is ',
      #           'Which means it is ',
      #           'That is going to be '
      #         ] | random }} 
      #         {{ [ 'hot,',
      #           'hotter than the sun, ',
      #           'hotter than hot. but in a lot of bad ways, ',
      #           'hotter than the sun outside, ',
      #           'super hot, ',
      #           'hotter than the inside of a volcano, '
      #         ] | random }} 
      #         so I suggest wearing shorts.
      #       {% else %}
      #          {{ [ 'That is ',
      #           'Which means it is ',
      #           'That is going to be '
      #         ] | random }} 
      #          {{ states.sensor.clothing_forecast.state }} today so I suggest wearing shorts.
      #       {% endif %} 
      #     {% else %}
      #       Based on the current temperature, 
      #       {% if is_state('sensor.clothing_forecast', 'Freezing') %}
      #         It is freezing. so I suggest wearing long pants and a heavy coat if you are going out.
      #       {% elif is_state('sensor.clothing_forecast','Cold') %}
      #         It is cold outside. so I suggest wearing long pants and a light jacket.
      #       {% elif is_state('sensor.clothing_forecast', 'Chilly') %}
      #         It is chilly right now. so I suggest wearing at least long pants 
      #         if you are going to venture outside.
      #       {% elif is_state('sensor.clothing_forecast', 'Nice') %}
      #         It is            
      #         {{ [ 'nice outside. ',
      #           'pretty nice outside. ',
      #           'a good day to be outside. ',
      #           'rather enjoyable outside. ',
      #         ] | random }} 
      #         So I suggest wearing shorts.
      #       {% elif is_state('sensor.clothing_forecast', 'Toasty') %}
      #         It is 
      #         {{ [ 'bit warm ',
      #           ' rather warm outside ',
      #           ' almost too hot outside ',
      #           ' a little warm ',
      #         ] | random }} 
      #         outside. So I suggest wearing shorts. 
      #       {% elif is_state('sensor.clothing_forecast', 'Hot') %}
      #         It is 
      #         {{ [ 'hot',
      #           'hotter than the sun ',
      #           'hotter than hot. but in a lot of bad ways ',
      #           'hotter than the sun outside ',
      #           'super hot ',
      #           'hotter than the inside of a volcano '
      #         ] | random }} 
      #         outside. So I suggest wearing shorts.
      #       {% else %}
      #         It is {{ states.sensor.clothing_forecast.state }} right now so I suggest wearing shorts.
      #       {% endif %} 
      #     {% endif %}
      #     Oh, and right now it is {{ states('weather.maison_des_lunes') }}
      # nws_current_visibility:
      #   friendly_name: "Current Visability"
      #   value_template: "{{ ((state_attr('weather.maison_des_lunes','visibility') | int) * 0.621371) | round }}"

      # sun_status: 
      #   friendly_name: "Sun Status"
      #   value_template: >-
      #     {%- if is_state('sun.sun', 'below_horizon') -%}
      #       You have 
      #       {%- set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() -%}
      #       {% set hours = seconds / 60 -%}
      #       {%- if seconds / ( 60 * 60 ) > 1 -%}
      #         {{ (seconds //  ( 60 * 60 )) | int }} hours
      #       {%- else -%}
      #         {{""}}{{ (seconds // 60) | int }} minutes
      #       {%- endif -%}
      #       {{ [
      #         ' until the sun rises.',
      #         ' until the sun is up.',
      #         ' before the sun officially rises. '
      #       ]|random }}
      #     {%- else %}
      #       You have 
      #       {%- set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %}
      #       {%- set hours = seconds / 60 -%}
      #       {%- if seconds / ( 60 * 60 ) > 1 -%}
      #         {{""}} {{ (seconds //  ( 60 * 60 )) | int }} hours
      #       {%- else -%}
      #         {{ (seconds // 60) | int }} minutes
      #       {%- endif -%}
      #       {{ [
      #         ' until the sun sets for the day.',
      #         ' until the sun slips below the horizon.',
      #         ' before the sun officially sets. '
      #       ]|random }}
      #     {%- endif -%}

      # current_inside_humidity:
      #   friendly_name: "Current Inside Humidity"
      #   unit_of_measurement: "%"
      #   value_template: "{{ state_attr('climate.home','current_humidity') }}"
      # lightning_stike_count:
      #   friendly_name: "Lightning Strike Count"
      #   value_template: "{{ states('sensor.acurite_6045m_green_house_strcnt') | int }}"
      
      # previous_rainfall:
      #   friendly_name: "Past 48h Rainfall"
      #   value_template: "{{ states('sensor.daily_rainfall_in') | float  + state_attr('sensor.daily_rainfall_in', 'last_period') | float | round(1) }}"
      # lightning_warning:
      #   friendly_name: "Lightning Warning"
      #   value_template: >-
      #     {%- if states('sensor.recent_lightning_strikes') | int > 0 %}
      #       Unsafe
      #     {% else %}
      #       Safe
      #     {%- endif %}

script:
  refresh_weather_alert_sensors:
    sequence:
      - service: homeassistant.update_entity
        entity_id: sensor.tornado_warning
      - service: homeassistant.update_entity
        entity_id: sensor.tornado_watch
      - service: homeassistant.update_entity
        entity_id: sensor.tstorm_warning
      - service: homeassistant.update_entity
        entity_id: sensor.tstorm_watch
      - service: homeassistant.update_entity
        entity_id: sensor.flood_warning
      - service: homeassistant.update_entity
        entity_id: sensor.flood_watch

automation:
  - id: baa6931a-ab41-46ae-bf5c-c38bfa1573d8
    alias: Update Weather Records
    mode: queued
    trigger:
    - platform: state
      entity_id: sensor.recent_lightning_strikes
      id: new_strike
    - platform: state
      entity_id: sensor.daily_max_wind_speed
      id: new_gust
    - platform: state
      entity_id: sensor.adj_wind_speed
      id: new_wind_speed
    - platform: time
      at: "23:55:00"
      id: daily
    - platform: time
      at: "00:01:00"
      id: save_stats
    - platform: time
      at: "00:03:00"
      id: record_reset
    - platform: time
      at: "00:00:00"
      id: record_reset
    action:
    - choose:
      - conditions:
          - condition: trigger
            id: save_stats
        sequence:
          - service: mqtt.publish
            data:
              topic: house/weather/rain_guage_start
              payload: "{{ states('sensor.acurite_rain899_rain_gauge_rt') }}"
              retain: true
          - service: mqtt.publish
            data:
              topic: house/weather/rain_guage_ws_start
              payload: "{{ states('sensor.acurite_5n1_865_rt') }}"
              retain: true
          - if:
            - condition: numeric_state
              entity_id: sensor.chill_time_yesterday
              above: 0
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/chillhours
                payload: >
                  {% set total = (states('sensor.chill_time_yesterday') | float | round(1)) + (states('sensor.chill_hours') | float) | round(1) %}
                  {{ total }}
                retain: true
          - if:
            - condition: numeric_state
              entity_id: sensor.freeze_time_yesterday
              above: 0
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/freezehours
                payload: >
                  {% set total = (states('sensor.freeze_time_yesterday') | float | round(1)) + (states('sensor.freeze_hours') | float) | round(1) %}
                  {{ total }}
                retain: true
      - conditions:
          - condition: trigger
            id: record_reset    
        sequence:
          - if:
            - condition: template
              value_template: "{{ now().day == 1 }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/monthlymaxtemp
                payload: "{{ states('sensor.acurite_5n1_865_f') }}"
                retain: true
            - service: mqtt.publish
              data:
                topic: house/weather/monthlylowtemp
                payload: "{{ states('sensor.acurite_5n1_865_f') }}"
                retain: true
          - if:
            - condition: time
              weekday:
              - sun
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/weekly_rainfall
                payload: "{{ states('sensor.rainfall_last_week_2') }}"
          - if:
            - condition: template
              value_template: "{{ now().day == 28 }}"
            - condition: template
              value_template: "{{ now().month == 4 }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/chillhours
                payload: "0"
                retain: true
            - service: mqtt.publish
              data:
                topic: house/weather/freezehours
                payload: "0"
                retain: true
      - conditions:
          - condition: trigger
            id: new_strike
        sequence:
          - if:
            - condition: template
              value_template: "{{ (states('sensor.recent_lightning_strikes') | float) > (states('sensor.max_lightning_strikes') | float) }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/maxstrikes
                payload: "{{ states('sensor.recent_lightning_strikes') }}"
                retain: true
      - conditions:
          - condition: trigger
            id: new_wind_speed
        sequence:
          - service: mqtt.publish
            data:
              topic: house/weather/new_wind_speed
              payload: >
                {% if has_value('sensor.adj_wind_speed') %}
                  {{ states('sensor.adj_wind_speed') | int }}
                {% else %}
                  0
                {% endif %}
              retain: true
      - conditions:
          - condition: trigger
            id: new_gust
        sequence:
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_max_wind_speed') | float) > (states('sensor.max_wind_gust') | float) }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/maxwind
                payload: "{{ states('sensor.daily_max_wind_speed') }}"
                retain: true
            - service: script.text_notify
              data_template:
                who: "jeff"
                title: "New Max Gust"
                message: "Just recorded a gust at {{ states('sensor.daily_max_wind_speed') }} mph"
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_max_wind_speed') | float) > (states('sensor.ath_wind_gust') | float)  }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/athwind
                payload: "{{ states('sensor.daily_max_wind_speed') }}"
                retain: true
            - service: script.text_notify
              data_template:
                who: "jeff"
                title: "New ATH Gust"
                message: "Just recorded a new ALL TIME HIGH WIND GUST: {{ states('sensor.daily_max_wind_speed') }} mph"
            - delay: "00:00:30"
            - service: script.twitter_notify
              data_template:
                message: >
                        {{ [
                          "We have recorded a new all time high wind gust at Maison Des Lunes: {{ states('sensor.ath_wind_gust') }} mph ",
                          "We have a new all time high wind gust at Maison Des Lunes: {{ states('sensor.ath_wind_gust') }} mph ",
                          "A Maison Des Lunes record has been broken. The All Time high wind gust is now {{ states('sensor.ath_wind_gust') }} mph "
                          ] | random -}}
      - conditions:
          - condition: trigger
            id: daily
        sequence:
          - service: input_boolean.turn_off
            entity_id: input_boolean.lightning_tweet
          - service: mqtt.publish
            data:
              topic: house/weather/yesterday_rainfall_in
              payload: "{{ state_attr('sensor.daily_rainfall_ut','last_period') | float }}"
              retain: true
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_max_temp') | float) > (states('sensor.max_temp') | float)  }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/maxtemp
                payload: "{{ states('sensor.daily_max_temp') }}"
                retain: true
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_max_temp') | float) > (states('sensor.ath_max_temp') | float)  }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/athmaxtemp
                payload: "{{ states('sensor.daily_max_temp') }}"
                retain: true
            - service: script.text_notify
              data_template:
                who: "jeff"
                title: "New ATH High Temp"
                message: "Just recorded a new ALL TIME HIGH TEMP: {{ states('sensor.daily_max_temp') }} degrees."
            - delay: "00:00:30"
            # - service: script.twitter_notify
            #   data_template:
            #     message: >
            #             {{ [
            #               "We have recorded a new all time high temp at Maison Des Lunes: {{ states('sensor.ath_max_temp') }} degrees ",
            #               "We have a new all time high temp at Maison Des Lunes: {{ states('sensor.ath_max_temp') }} degrees ",
            #               "A Maison Des Lunes record has been broken. The All Time High Temp is now {{ states('sensor.ath_max_temp') }} degrees "
            #               ] | random -}}
          # - if:
          #   - condition: template
          #     value_template: "{{ (states('sensor.daily_max_temp') | float) > (states('sensor.monthly_max_temp') | float) }}"
          #   then:
          #   - service: mqtt.publish
          #     data:
          #       topic: house/weather/monthlymaxtemp
          #       payload: "{{ states('sensor.daily_max_temp') }}"
          #       retain: true
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_low_temp') | float) < (states('sensor.low_temp') | float) }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/lowtemp
                payload: "{{ states('sensor.daily_low_temp') }}"
                retain: true
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_low_temp') | float) < (states('sensor.ath_low_temp') | float) }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/athlowtemp
                payload: "{{ states('sensor.daily_low_temp') }}"
                retain: true
            - service: script.text_notify
              data_template:
                who: "jeff"
                title: "New ATH Low Temp"
                message: "Just recorded a new ALL TIME LOW TEMP: {{ states('sensor.daily_low_temp') }} degrees."
            - delay: "00:00:30"
            # - service: script.twitter_notify
            #   data_template:
            #     message: >
            #             {{ [
            #               "We have recorded a new all time low temp at Maison Des Lunes: {{ states('sensor.ath_low_temp') }} degrees",
            #               "We have a new all time low temp at Maison Des Lunes: {{ states('sensor.ath_low_temp') }} degrees",
            #               "A Maison Des Lunes record has been broken. The All Time low Temp is now {{ states('sensor.ath_low_temp') }} degrees"
            #               ] | random -}}
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_rainfall_ut') | float) > (states('sensor.ath_daily_rain') | float) }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/athdailyrain
                payload: "{{ states('sensor.daily_rainfall_ut') }}"
                retain: true
            - service: script.text_notify
              data_template:
                who: "jeff"
                title: "New Wettest Day"
                message: "Just recorded a new ALL TIME Daily Rainfall: {{ states('sensor.ath_daily_rain') }} inches."
          - if:
            - condition: template
              value_template: "{{ (states('sensor.daily_max_wind_speed') | float) > (states('sensor.max_wind_gust') | float) }}"
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/maxwind
                payload: "{{ states('sensor.daily_max_wind_speed') }}"
                retain: true
          - if:
            - condition: numeric_state
              entity_id: sensor.daily_rainfall_ut
              above: 0
            then:
            - service: mqtt.publish
              data:
                topic: house/weather/daysrain
                payload: >
                  {% set total = states('sensor.days_with_rain') | int + 1 %}
                  {{ total }}
                retain: true
            - service: mqtt.publish
              data:
                topic: house/weather/totalrainfall
                payload: >
                  {% set total = (states('sensor.daily_rainfall_ut') | float) + (states('sensor.total_rain_fall') | float) | round(1) %}
                  {{ total }}
                retain: true
          # - service: mqtt.publish
          #   data:
          #     topic: house/weather/totalstrikes
          #     payload: >
          #       {% set total = (states('sensor.daily_lightning_strikes') | int) + (states('sensor.total_lightning_strikes') | int) %}
          #       {{ total }}
          #     retain: true
